import asyncio
import random
import re
import time
from threading import Thread

import psycopg2
from telethon import TelegramClient
from telethon import errors
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
from telethon.tl.functions.users import GetFullUserRequest

print(f"–ì–æ—Ç–æ–≤ –≤–∫–∞–ª—ã–≤–∞—Ç—å")
#playsound('readytowork.mp3')
#time.sleep(1)


async def workThread(x):
    exit = False
    await asyncio.sleep(random.uniform(0.1, 0.5))
    print(f"MultiThreadForBotID: {x}")
    while True:
        if exit is True:
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π 2 –æ–∫–æ–Ω—á–µ–Ω–æ")
            break
        not_message = 0
        count_tryes = 0
        wait_in_quests = 0
        max_count_types = 3

        connect = psycopg2.connect(dbname='parsedaccounts', user='postgres',
                                   password='s56u9555', host='localhost')
        cur = connect.cursor()
        cur.execute(f"SELECT API_ID FROM RegistredBots WHERE ID = {x}")
        Api_id = cur.fetchone()[0]
        time.sleep(random.uniform(0.1, 0.5))
        cur.execute(f"SELECT API_HASH FROM RegistredBots WHERE ID = {x}")
        Api_hash = cur.fetchone()[0]
        time.sleep(random.uniform(0.1, 0.5))
        cur.execute(f"SELECT Session FROM RegistredBots WHERE ID = {x}")
        time.sleep(random.uniform(0.1, 0.5))
        cur.execute(f"SELECT Session FROM RegistredBots WHERE ID = {x}")
        Session = cur.fetchone()[0]
        connect.close()
        print(f"–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –∑–∞–¥–∞–Ω–∏—è–º –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–∞–º–∏ BOT ID{x}")
        client = TelegramClient(Session, Api_id, Api_hash)
        await client.start()
        print(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç - bot id - {x}")
        print(f"–ü–æ—Ä–∞ –æ–±–ª–æ–ø–æ—à–∏—Ç—å —ç—Ç–∏—Ö –ø–∏–¥–æ—Ä–æ–≤")
        while True:
            next = True
            if not_message == 3:
                print(f"–ë–æ—Ç—è—Ä —ç—Ç–∏—Ö –µ–±–ª–∞–Ω –ø–∏—Å–∞–ª –µ–π –±–æ–≥—É —Ö—É–ª–∏ –æ–Ω–∏ –º–æ–ª—á–∞—Ç")
                exit = True
                break
            if count_tryes == max_count_types:
                print(f"–ü–æ–≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–∏—Ö –≥–∞–≤–Ω–æ–∫–æ–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —Ö–≤–∞—Ç–∏—Ç")
                exit = True
                break
            if wait_in_quests == 5:
                print(f"–ì–∞–≤–Ω–æ–∫–æ–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç. –ü–µ—á–∞–ª—å–∫–∞ –∞ —Ç–æ —Ç–∞–∫ –º–Ω–æ–≥–æ –¥–∞–≤–∞–ª–∏")
                exit = True
                break
            try:
                dialogs = await client.get_dialogs()
                for dialog in dialogs:
                    if dialog.title == 'LTC Click Bot':
                        thisdialog = dialog
                        print(thisdialog.title)
                await client.send_message('LTC Click Bot', 'ü§ñ Message bots')
                time.sleep(2)
                msgs = await client.get_messages(thisdialog, limit=1)
                for mes in msgs:
                    if re.search(r'\bSorry\b', mes.message):
                        print("–ü–∏–¥–æ—Ä—ã –∏–∑–≤–∏–Ω—è—é—Ç—Å—è")
                        wait_in_quests += 1
                        print("–ù–∏—á–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º")

                        next = False
                    else:
                        entity = mes.reply_markup.rows[0].buttons[0].url
                        message_id = mes.id
                        reqdata = mes.reply_markup.rows[1].buttons[1].data
                        time.sleep(3)

                    if next is True:
                        print(entity)
                        entity = str(entity).replace("https://t.me/", "")
                        entity = str(entity).split("?")[0]

                        full = await client(GetFullUserRequest(entity))
                        bot = full.user
                        if bot.last_name is None:
                            full_bot_entity = bot.first_name
                        else:
                            full_bot_entity = str(f"{bot.first_name} {bot.last_name}")

                        print(entity)
                        await client.send_message(entity, '/start')

                        time.sleep(5)
                        for dialog in dialogs:
                            if dialog.title == full_bot_entity:
                                thisdialog1 = dialog
                                print(thisdialog1.title)
                        msgs2 = await client.get_messages(thisdialog1, limit=1)
                        for mes2 in msgs2:
                            if mes2 is None:
                                print("–£–µ–±–∫–∏ –Ω–∞ –±–æ—Ç—è—Ä–µ")
                                await client(GetBotCallbackAnswerRequest(
                                    thisdialog,
                                    message_id,
                                    data=reqdata
                                ))
                                print("–°–∫–∏–ø–∞–µ–º —É–µ–±—Å–∫–æ–≥–æ –±–æ—Ç–∞")
                                not_message += 1
                            elif mes2.message == "/start":
                                print("–£–µ–±–∫–∏ –Ω–∞ –±–æ—Ç—è—Ä–µ –Ω–µ –ø–∏—à–µ—Ç –Ω–∏—Ö—É—è /start –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –±—É–¥—É")
                                await client(GetBotCallbackAnswerRequest(
                                    thisdialog,
                                    message_id,
                                    data=reqdata
                                ))
                                print("–°–∫–∏–ø–∞–µ–º —É–µ–±—Å–∫–æ–≥–æ –±–æ—Ç–∞")
                                not_message += 1
                            else:
                                await client.forward_messages('LTC Click Bot', mes2.id, entity)
                                print(f"–ë–û–¢ {x} –ü–û–ì–û–í–û–†–ò–õ –° –ë–û–¢–û–ú –ò –ü–û–õ–£–ß–ò–õ –ö–≠–®")
                                count_tryes += 1

            except errors.FloodWaitError as e:
                print(f'–ù–∞—Å –æ–ø—Ä–∞–∫–∏–Ω—É–ª–∏ –µ–±–∞–ª–æ–º –≤ –≥—Ä—è–∑—å —Å–∏–¥–∏–º {e.seconds} —Å–µ–∫—É–Ω–¥')
                time.sleep(e.seconds)



def wrap(i):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    asyncio.run(workThread(i))
    loop.close()


if __name__ == '__main__':
    connect = psycopg2.connect(dbname='parsedaccounts', user='postgres',
                               password='s56u9555', host='localhost')
    cur1 = connect.cursor()
    cur1.execute("SELECT Count(ID) FROM RegistredBots")

    nums = cur1.fetchone()[0]
    connect.close()
    p = []
    for i in range(1, nums + 1):
        p1 = Thread(target=wrap, args=(i,)).start()


#TODO –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥.
#TODO –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—ã–≤–æ–¥ –≤ –ø–æ—Ç–æ–∫–∏. –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤ SELECT Count(ID) FROM RegistredBots –Ω–∞ SELECT ID FROM RegistredBots –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É